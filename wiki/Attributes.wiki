There are 4 Dexter operators used to substitute data into target attributes:

 * dx:attr
 * dx:attrs
 * dx:cattr
 * dx:cattrs

The '!' prefix may be used to retain a default value from the target document.

It does not matter if the attribute is present in the source document or not.

 == dx:attr ==
 `dx:attr="[attribute-name]:{prefix}?XPath"`

*attr* handles the simplest case, substituting a single value into a single target attribute.

{{{
data.xml
<data>
  <profile>
      <name>John</name>
      <icon>john.jpg</icon>
      <description>Something about me</description>
  </profile>
</data>
}}}

{{{
dexter source
<div>
   <span dx:text="data/profile/name">Name</span> 
   <img src="notfound.jpg" dx:attr="src:data/profile/icon" />
</div>
}}}
{{{
renders as
<div>
   <span>John</span> 
   <img src="john.jpg"/>
</div>
}}}

If the value of `data/profile/icon` had been empty, the result would have been an empty `src` attribute.

If the '!' prefix had been used thus dx:attr="src:!data/profile/icon" and the value`data/profile/icon` had been empty, the result would have been  `src="notfound.jpg".

 == dx:attrs==
 `dx:attr="SEP[attribute-name]:{prefix}?XPath(SEP)[attribute-name]:{prefix}?XPath"`

*attrs* operates similarly to *attr* except that it may set multiple attributes.  The first character in it's argument string it taken as a separator character and used as such throughout.
{{{
dexter source
   <img src="notfound.jpg" 
    dx:attrs="|src:data/profile/icon|title:data/profile/description" />
}}}
{{{
renders as
   <img src="john.jpg" title="Something about me" />
}}}