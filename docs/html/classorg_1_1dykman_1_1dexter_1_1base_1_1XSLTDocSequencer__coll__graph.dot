digraph G
{
  bgcolor="transparent";
  edge [fontname="FreeSans",fontsize=10,labelfontname="FreeSans",labelfontsize=10];
  node [fontname="FreeSans",fontsize=10,shape=record];
  Node1 [label="{org.dykman.dexter.base.XSLTDocSequencer\n|+ XSLTEXT\l+ XSLVALUEOF\l+ XSLTEMPLATE\l+ XSLFOREACH\l+ XSLVARIABLE\l+ XSLELEMENT\l~ iteratorStack\l~ functiondesc\l- indent\l- method\l- mediaType\l- levelCounter\l- dexterNamespaces\l- builder\l- finished\l- valMap\l- replacementMap\l- pathc\l- nodeTypes\l- nodeLevel\l- idNames\l- docStack\l- nameStack\l- nodeStack\l- stylesheetStack\l- currentDocument\l- currentNode\l- currentStylesheet\l- filename\l- encoding\l|+ XSLTDocSequencer()\l+ setIdNames()\l+ startIterator()\l+ endIterator()\l+ mapNode()\l+ copyNodes()\l+ copyNodes()\l+ mapAttribute()\l+ setAttribute()\l+ setIdentityAttribute()\l+ startTest()\l+ endTest()\l+ startCaseBlock()\l+ endCaseBlock()\l+ startCase()\l+ endCase()\l+ startSubdoc()\l+ endSubdoc()\l+ setDocType()\l+ startNode()\l+ endNode()\l+ textContainer()\l+ textContainer()\l+ getCurrentNode()\l+ getDocuments()\l+ setIndent()\l+ setMethod()\l+ setMediaType()\l+ setDexterNamespaces()\l~ [instance initializer]()\l# getInnerExpresion()\l# callTemplateEvaluator()\l# valueTemplate()\l# translateEntityReference()\l# createStub()\l# createExternalTemplateCall()\l# createStub()\l# processIdentityValueTemplate()\l# createIdentityValueExpression()\l- blockComment()\l- tagTemplate()\l- popStylesheet()\l- pushStylesheet()\l- pushDoc()\l- popDoc()\l- pushNode()\l- popNode()\l- translateName()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize=10,style="solid",arrowtail="empty",fontname="FreeSans"];
  Node2 [label="{org.dykman.dexter.base.BaseTransformSequencer\n|~ dexter\l# metaData\l# pathFunctions\l|+ BaseTransformSequencer()\l+ definePathFunction()\l+ setMeta()\l+ getMeta()\l+ runDescriptor()\l+ translateXSLPath()\l# getLastToken()\l# generateXSLTest()\l# generateXSLTest()\l- createPathFunction()\l- rawXSLPath()\l}",height=0.2,width=0.4,color="black",URL="$classorg_1_1dykman_1_1dexter_1_1base_1_1BaseTransformSequencer.html"];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize=10,style="solid",arrowtail="empty",fontname="FreeSans"];
  Node3 [label="{org.dykman.dexter.base.TransformSequencer\n||+ setDocType()\l+ runDescriptor()\l+ getCurrentNode()\l+ translateXSLPath()\l+ setIdNames()\l+ textContainer()\l+ startNode()\l+ endNode()\l+ mapAttribute()\l+ mapNode()\l+ copyNodes()\l+ copyNodes()\l+ startSubdoc()\l+ endSubdoc()\l+ setAttribute()\l+ setIdentityAttribute()\l+ setMeta()\l+ getMeta()\l+ startIterator()\l+ endIterator()\l+ startCaseBlock()\l+ endCaseBlock()\l+ startCase()\l+ endCase()\l+ startTest()\l+ endTest()\l}",height=0.2,width=0.4,color="black",URL="$interfaceorg_1_1dykman_1_1dexter_1_1base_1_1TransformSequencer.html"];
  Node4 -> Node2 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="dexter",arrowtail="open",fontname="FreeSans"];
  Node4 [label="{org.dykman.dexter.Dexter\n|+ DEXTER_VERSION\l+ DEXTER_COPYRIGHT\l~ dexterNamespaces\l~ outputFile\l# inputDocument\l# builder\l# userData\l# baseResolver\l# entityResolver\l# modulesMap\l# idNames\l- propertyPath\l- encoding\l- indent\l- method\l- mediaType\l- descriptors\l- editors\l- blocks\l- propigateComments\l- templateLibrary\l|+ namespaces()\l+ Dexter()\l+ addTemplate()\l+ loadTemplateRecurse()\l+ loadTemplate()\l+ getModules()\l+ getEntity()\l+ getProperty()\l+ getProperty()\l+ init()\l+ setIndent()\l+ setMethod()\l+ setMediaType()\l+ defineModule()\l+ generateXSLT()\l+ isIdName()\l+ blessTree()\l+ bless()\l+ scanDocument()\l+ scanDocument()\l+ compileDescriptors()\l+ createSpecifier()\l+ compileNode()\l+ findContiguousSiblings()\l+ setIndent()\l+ isPropigateComments()\l+ setPropigateComments()\l+ addSpecifier()\l+ marshallNode()\l+ marshall()\l+ reportInternalError()\l# executeEditors()\l# scanForEditors()\l# scanForDescriptors()\l- loadTemplateLibrary()\l- initializeProperties()\l- searchProperties()\l- parseNs()\l- localName()\l- loadBuiltInProperties()\l}",height=0.2,width=0.4,color="black",URL="$classorg_1_1dykman_1_1dexter_1_1Dexter.html"];
  Node5 -> Node4 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="mediaType\nmethod\nDEXTER_VERSION\npropertyPath\nDEXTER_COPYRIGHT\nindent\nencoding",arrowtail="open",fontname="FreeSans"];
  Node5 [label="{String\n||}",height=0.2,width=0.4,color="grey75"];
  Node6 -> Node4 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="dexterNamespaces\nidNames",arrowtail="open",fontname="FreeSans"];
  Node6 [label="{List\< String \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node7 -> Node4 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="entityResolver\nbaseResolver",arrowtail="open",fontname="FreeSans"];
  Node7 [label="{org.dykman.dexter.base.PropertyResolver\n||+ getProperty()\l+ getProperty()\l+ setProperty()\l+ getPropertiesMatching()\l}",height=0.2,width=0.4,color="black",URL="$interfaceorg_1_1dykman_1_1dexter_1_1base_1_1PropertyResolver.html"];
  Node8 -> Node4 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="outputFile",arrowtail="open",fontname="FreeSans"];
  Node8 [label="{Set\< File \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node9 -> Node4 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="modulesMap",arrowtail="open",fontname="FreeSans"];
  Node9 [label="{Map\< String, PropertyResolver \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node10 -> Node4 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="builder",arrowtail="open",fontname="FreeSans"];
  Node10 [label="{DocumentBuilder\n||}",height=0.2,width=0.4,color="grey75"];
  Node11 -> Node4 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="editors\nblocks\ndescriptors",arrowtail="open",fontname="FreeSans"];
  Node11 [label="{Map\< String, String \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node12 -> Node4 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="inputDocument\ntemplateLibrary",arrowtail="open",fontname="FreeSans"];
  Node12 [label="{Document\n||}",height=0.2,width=0.4,color="grey75"];
  Node13 -> Node4 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="propigateComments",arrowtail="open",fontname="FreeSans"];
  Node13 [label="{boolean\n||}",height=0.2,width=0.4,color="grey75"];
  Node14 -> Node4 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="userData",arrowtail="open",fontname="FreeSans"];
  Node14 [label="{Map\< Object, Object \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node11 -> Node2 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="metaData",arrowtail="open",fontname="FreeSans"];
  Node15 -> Node2 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="pathFunctions",arrowtail="open",fontname="FreeSans"];
  Node15 [label="{Map\< String, PathFunction \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node5 -> Node1 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="XSLTEMPLATE\nmediaType\nXSLFOREACH\nmethod\nXSLTEXT\nlevelCounter\nXSLVARIABLE\nXSLVALUEOF\nindent\nXSLELEMENT\n...",arrowtail="open",fontname="FreeSans"];
  Node16 -> Node1 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="docStack",arrowtail="open",fontname="FreeSans"];
  Node16 [label="{Stack\< Document \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node17 -> Node1 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="currentNode\ncurrentStylesheet",arrowtail="open",fontname="FreeSans"];
  Node17 [label="{Node\n||}",height=0.2,width=0.4,color="grey75"];
  Node6 -> Node1 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="dexterNamespaces\nidNames",arrowtail="open",fontname="FreeSans"];
  Node18 -> Node1 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="nodeTypes",arrowtail="open",fontname="FreeSans"];
  Node18 [label="{short[]\n||}",height=0.2,width=0.4,color="grey75"];
  Node19 -> Node1 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="finished",arrowtail="open",fontname="FreeSans"];
  Node19 [label="{Map\< String, Document \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node20 -> Node1 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="stylesheetStack",arrowtail="open",fontname="FreeSans"];
  Node20 [label="{Stack\< Element \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node21 -> Node1 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="pathc\nnodeLevel",arrowtail="open",fontname="FreeSans"];
  Node21 [label="{int\n||}",height=0.2,width=0.4,color="grey75"];
  Node10 -> Node1 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="builder",arrowtail="open",fontname="FreeSans"];
  Node12 -> Node1 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="currentDocument",arrowtail="open",fontname="FreeSans"];
  Node22 -> Node1 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="nodeStack",arrowtail="open",fontname="FreeSans"];
  Node22 [label="{Stack\< Node \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node23 -> Node1 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="nameStack\niteratorStack",arrowtail="open",fontname="FreeSans"];
  Node23 [label="{Stack\< String \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node24 -> Node1 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="replacementMap",arrowtail="open",fontname="FreeSans"];
  Node24 [label="{Map\< String, Map\< String, List\< Element \> \> \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node25 -> Node1 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="functiondesc",arrowtail="open",fontname="FreeSans"];
  Node25 [label="{Pattern\n||}",height=0.2,width=0.4,color="grey75"];
  Node26 -> Node1 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="valMap",arrowtail="open",fontname="FreeSans"];
  Node26 [label="{Map\< String, Map\< String, DocumentFragment \> \>\n||}",height=0.2,width=0.4,color="grey75"];
}
